Theory
Macros:
Macros are reusable code segments in assembly language that can be invoked multiple times throughout a program, aiding in code abstraction and reducing redundancy.

Macro Definition:
Defines a set of assembly instructions with placeholders for parameters. Parameters can be substituted with actual values during invocation. Macros can have multiple arguments for flexibility.

Macro Invocation:
Replaces a macro call with the instructions defined in its definition, substituting placeholder parameters with actual values provided during invocation. Macros can be invoked multiple times with different arguments.

Multiple Arguments in Macros:
Macros can accept multiple parameters, each identified by a placeholder symbol (e.g., %1, %2). These symbols represent the order of arguments specified during invocation.

Usage:
Macros with multiple arguments promote code reuse, modularity, and maintainability by encapsulating repetitive code segments with variations in input values.

Example:
A macro named ADD_TWO_NUMBERS may have two arguments representing numbers to be added. Invocation like ADD_TWO_NUMBERS 10, 20 substitutes %1 with 10 and %2 with 20 in the macro definition.

from sys import exit

motOpCode = ["MOV", "ADD", "SUB", "MUL", "DIV", "AND", "OR",
             "LOAD", "STORE", "DCR", "INC", "JMP", "JNZ", "HALT"]
keywords = ["MACRO", "CONST", "DOUBLE", "INT", "FLOAT", "SHORT", "LONG", "STRUCT", "IF", "ELSE", "FOR", "SWITCH",
            "CASE", "CHAR", "RETURN", "PRINTF", "SCANF", "AX", "BX", "CX", "DX", "AH", "BH", "CH", "DH", "AL", "BL",
            "CL", "DL"]
sourceCode = []
macroNames = []
macroDefinition = []
outputSourceCode = []
noOfInstructionSC = 0
noOfMacroCall = 0
noOfInstructionMC = 0
expandedCode = 0
totalArgs = []
x = 0
mapping = {}


mc = int(input("Enter the number of Macro Definition code line : "))
for i in range(mc):
    instruction = input(
        "Enter Macro code instruction {} :".format(i + 1)).upper()
    macroDefinition.append(instruction)


if macroDefinition[0] == "MACRO" and macroDefinition[-1] == "MEND":
    temp = str(macroDefinition[1])
    macroName, *argName = temp.split()
    temp = argName
    for i in range(len(temp)):
        if ',' in temp[i]:
            argName[i] = argName[i][0:-1]
    if macroName not in keywords and macroName not in motOpCode:
        macroNames.append(macroName)
else:
    print("Invalid Macro Definition.")
    exit(0)

sc = int(input("Enter the number of Source code lines : "))
for i in range(sc):
    instruction = input(
        "Enter Source code instruction {} : ".format(i + 1)).upper()
    sourceCode.append(instruction)

for i in range(sc):
    if macroName in sourceCode[i]:
        noOfMacroCall = noOfMacroCall + 1
    else:
        noOfInstructionSC = noOfInstructionSC + 1

for i in range(sc):
    if macroName in sourceCode[i]:
        x = x + 1
        noOfInstructionMC = 0
        temp = str(sourceCode[i])
        macroName, *argValue = temp.split()
        totalArgs.append(argValue)
        temp = argValue
        for j in range(len(temp)):
            if ',' in temp[j]:
                argValue[j] = argValue[j][0:-1]

        # Create Dictionary for mapping
        for j in range(len(argName)):
            name, value = argName[j], argValue[j]
            mapping[name + str(x)] = value

        for j in range(2, mc - 1):
            for k in range(len(argName)):
                if argName[k] in macroDefinition[j]:
                    temp = macroDefinition[j]
                    opCode, value = temp.split()
                    tempValue = mapping.get(value + str(x))
                    temp = opCode + ' ' + str(tempValue)
            outputSourceCode.append(temp)
            noOfInstructionMC = noOfInstructionMC + 1
    else:
        temp = sourceCode[i]
        outputSourceCode.append(temp)

print("Expanded Source Code is : ")
for i in outputSourceCode:
    print(i)
    expandedCode = expandedCode + 1

print()
print("No of instructions in input source code : {}".format(noOfInstructionSC))
print("No of macro call : {}".format(noOfMacroCall))
print("No of instructions defined in macro call : {}".format(noOfInstructionMC))
for i in range(len(totalArgs)):
    print("Actual arguement during {} Macro call 'ABHISHEK' = {}".format(
        i + 1, ', '.join(totalArgs[i])))
print("Total number of instructions in expanded code : {}".format(expandedCode))


instruction:

Enter the number of Macro Definition code line : 6
Enter Macro code instruction 1 :MACRO
Enter Macro code instruction 2 :RAHUL &ARG1, &ARG2, &ARG3
Enter Macro code instruction 3 :ADD &ARG1
Enter Macro code instruction 4 :SUB &ARG2
Enter Macro code instruction 5 :OR &ARG3
Enter Macro code instruction 6 :MEND
Enter the number of Source code lines : 7
Enter Source code instruction 1 : MOV R
Enter Source code instruction 2 : RAHUL 30, 40, 50
Enter Source code instruction 3 : DCR R
Enter Source code instruction 4 : AND R
Enter Source code instruction 5 : RAHUL 33, 44, 55
Enter Source code instruction 6 : MUL 88
Enter Source code instruction 7 : HALT
